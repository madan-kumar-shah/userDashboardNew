{"ast":null,"code":"import { BehaviorSubject, map } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport let UserService = /*#__PURE__*/(() => {\n  class UserService {\n    constructor() {\n      this.users = new BehaviorSubject([]);\n      this.users$ = this.users.asObservable();\n    }\n    addUser(user) {\n      try {\n        const newUser = {\n          ...user,\n          id: crypto.randomUUID()\n        };\n        const currentUsers = this.users.getValue();\n        this.users.next([...currentUsers, newUser]);\n      } catch (error) {\n        console.error('Error adding user:', error);\n        throw new Error('Failed to add user');\n      }\n    }\n    getRoleDistribution() {\n      return this.users$.pipe(map(users => {\n        const distribution = {};\n        users.forEach(user => {\n          distribution[user.role] = (distribution[user.role] || 0) + 1;\n        });\n        return {\n          Admin: distribution.Admin || 0,\n          Editor: distribution.Editor || 0,\n          Viewer: distribution.Viewer || 0\n        };\n      }));\n    }\n    static {\n      this.ɵfac = function UserService_Factory(t) {\n        return new (t || UserService)();\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: UserService,\n        factory: UserService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return UserService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}